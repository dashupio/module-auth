<social>
  <div class={ getClass('btnGroup', 'row') }>
    <div each={ (btn, i) in getButtons() } class={ getClass('btnColumn', 'col') }>
      <button onclick={ (e) => onButton(e, btn) } class={ getClass(toCammel(`btn-${btn.type}`), 'btn btn-primary btn-block') }>
        <i class={ `${getClass('icon', 'mr-2 fab fa-')}${btn.type}` } />
        { btn.type }
      </button>
    </div>
  </div>

  <script>
    // to cammel function
    const toCammel = (str) => {
      // Lower cases the string
      return str.toLowerCase()
        // Replaces any - or _ characters with a space 
        .replace( /[-_]+/g, ' ')
        // Removes any non alphanumeric characters 
        .replace( /[^\w\s]/g, '')
        // Uppercases the first character in each group immediately following a space 
        // (delimited by spaces) 
        .replace( / (.)/g, function($1) { return $1.toUpperCase(); })
        // Removes spaces 
        .replace( / /g, '' );
    };

    // import popup
    import { windowPopup } from 'window-popup';

		// export default
    export default {
      components : {
      },

      onBeforeMount(props, state) {
        // initial state
        this.state = {
					ready   : true,
          error   : null,
          success : null,
          loading : false,
        };

        // on login
        this.onLogin = this.onLogin.bind(this);

        // set dashup
        this.dashup = props.dashup;
        this.toCammel = toCammel;
      },

      onBeforeUnmount(props, state) {
        // remove listeners
        this.getButtons().forEach((btn) => {
          // await dashup emission
          this.dashup.removeListener(btn.uuid, this.onLogin);
        });
      },

      /**
       * on submit
       */
      async onButton(e, btn) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // done
        const url = `${this.dashup.opts.url}/connect/${this.props.page.get('_id')}/${btn.uuid}/auth?session=${this.dashup.sessionID}`;

        // window popup
        const w = windowPopup(500, 700, url, `Login with ${btn.type}`);

        // await dashup emission
        this.dashup.on(btn.uuid, this.onLogin);
      },

      onLogin(result) {
        // result
        this.props.page.user = new this.dashup.Model(result, this.dashup);
        this.props.page.emit('user', this.props.page.user);

        // on success
        if (this.props.success) {
          // do success
          this.props.success(result);
        }
      },

      getClass(name, def) {
        // classes
        const classes = this.props.classes || {};
        
        // check name
        if (!classes[name]) return def;

        // return props
        return classes[name];
      },

      getButtons() {
        // classes
        const buttons = (this.props.page.get('connects') || []).filter((c) => {
          // return type
          return ['google', 'facebook'].includes(c.type);
        });

        // return props
        return buttons || [];
      },

      getAction() {
        // get dashup and module
        const page   = this.props.page;
        const dashup = this.props.dashup;

        // get url
        return `${dashup.opts.url}/api/auth/${page.get('_id')}/login`;
      }
    }

  </script>
</social>